package org;


import java.util.Scanner;

class People {

	private int idx;
	private String name;
	private String phone;
	
	private int total = 0;
	
	public int getTotal() {
		return total;
	}
	public void setTotal(int total) {
		this.total = total;
	}
	public int getIdx() {
		return idx;
	}
	public void setIdx(int idx) {
		this.idx = idx;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}

	
	public People(){
		this(0,"no-name", "no-phone");
		
	}
	public People(int idx, String name, String phone){
		this.idx = idx;
		this.name = name;
		this.phone = phone;
		
	}
	public void addTotal()
	{total++;}
	public void mintotal()
	{total--;}
	
	@Override
	public String toString() {
		return "N0." + idx + ", 이름 : " + name + ", 번호 : " + phone ;
	}
	
}

class InputManager {
	Scanner sc = new Scanner(System.in);

	private int count = 0;

	public int inputMenu() {
		System.out.println("☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎☎");
		System.out.println("기능을 선택하세요.");
		System.out.println("1.입력 2.출력 3.검색 4.수정 5.삭제 6.종료");
		return sc.nextInt();

	}

	public People inputInfo() {
		People p = new People();

		System.out.println("◇◇◇◇◇◇◇◇입력◇◇◇◇◇◇◇◇");
		System.out.println("이름 : ");
		p.setName(sc.next());
		System.out.println("번호 : ");
		p.setPhone(sc.next());
		p.setIdx(count++);

		return p;

	}

	public String inputSearch() {
		System.out.println("찾으실 이름을 입력하세요");
		return sc.next();
	}

	public int inputModify() {

		System.out.println("변경할 항목을 선택하세요");
		System.out.println("1.이름  2.번호");
		return sc.nextInt();
	}

	public String inputModify2(int i) {
		switch (i) {
		case 1:
			System.out.println("변경할 이름을 입력하세요");
			return sc.next();

		case 2:
			System.out.println("변경할 번호를 입력하세요");
			return sc.next();

		default:
			System.out.println("잘못 입력하셨습니다.");
			return null;

		}

	}

}

class Info {
	private People[] pArr = new People[100];
	private int top = 0;

	public People[] getpArr() {
		return pArr;
	}

	public int getTop() {
		return top;
	}

	public void addPeople(People p) {
		pArr[top++] = p;

	}

	public void minTop() {
		top--;
		
	}

}

class Output {

	public void printList(People[] p, int top) {

		for (int i = 0; i < top; i++) {
			System.out.println(p[i]);
		}

	}

}

class Search {

	public People searchPeople(People[] pArr, String searchname, int top) {

		for (int i = 0; i < top; i++) {
			if (pArr[i].getName().equals(searchname)) {
				System.out.println(pArr[i]);

				return pArr[i];
			}
		}
		System.out.println("일치하는 이름을 찾을 수 없습니다.");
		return null;

	}
	public int searchArrNum(People[] pArr, String searchname, int top) {

		for (int i = 0; i < top; i++) {
			if (pArr[i].getName().equals(searchname)) {
				System.out.println(pArr[i]);

				return i;
			}
		}
		System.out.println("일치하는 이름을 찾을 수 없습니다.");
		return -1;

	}

}

class Modify {

	public void modi(People p, int i, String modify) {

		switch (i) {
		case 1:
			p.setName(modify);
			System.out.println("수정되었습니다.");
			System.out.println(p);
			break;

		case 2:
			p.setPhone(modify);
			System.out.println("수정되었습니다.");
			System.out.println(p);
			break;

		}

	}

}


class Delete {
	
	
	public void del(int arrNum, int top, People[] pArr) {
		System.out.println("삭제되었습니다.");
		for(int i = arrNum ; i < top-1 ; i++) {
				pArr[i]=pArr[i+1];
				pArr[top]=null;
		}
		
		
	}
	
	
	
}


public class Run {

	static InputManager ipm = new InputManager();
	static Info info = new Info();
	static Output op = new Output();
	static Search srch = new Search();
	static Modify mdf = new Modify();
	static Delete del = new Delete();
	
	
	
	public static void main(String[] args) {

		switch (ipm.inputMenu()) {

		case 1:

			info.addPeople(ipm.inputInfo());
			main(null);
			break;

		case 2:
			op.printList(info.getpArr(), info.getTop());
			main(null);
			break;

		case 3:
			srch.searchPeople(info.getpArr(), ipm.inputSearch(), info.getTop());
			main(null);
			break;

		case 4:
			People p = new People();
			p=srch.searchPeople(info.getpArr(), ipm.inputSearch(), info.getTop());
			
			if(p!=null) {			
			switch (ipm.inputModify()) {
			case 1:
				mdf.modi(p, 1, ipm.inputModify2(1));
				break;
			case 2:
				mdf.modi(p, 2, ipm.inputModify2(2));
				break;
			}}
			main(null);
			break;
		
		
		case 5 :
			int i = srch.searchArrNum(info.getpArr(), ipm.inputSearch(), info.getTop());
			if (i!=-1) {
			del.del(i ,info.getTop(), info.getpArr());
			info.minTop();}
			main(null);
			break;
		
		
		
		
		
		case 6:
			System.exit(0);

		default:
		}
	}

}

